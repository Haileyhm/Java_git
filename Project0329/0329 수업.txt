*클래스, 메소드
class = 설계도
new 뭐시기 = 인스턴스 

public void  (상태값을 저장할 수 있는 변수) 


속성 property 는 매서드 바깥에 넣음
매서드랑 같은 위계
ex) public int totalCoin = 0 

출력할 때 매서드는 괄호 안에 단독으로 들어가고 
속성은 (매서드. 속성 이름) 형태로 들어감

public void 와 private void 의 차이는 => 외부에서 접근 가능한지 여부 
public 은 가능하고 private은 불가능함 


public 으로 다 작성을 하는데 
외부에서 접근했을 때 문제가 생길 것 같은 애들만 private으로 해주면 돼 


-캡슐화의 기본?? 모든 프로그램은 세터, 게터 settter, getter 를 만들어야 한다.  

변수의 scope (유효범위) 전역 유효범위(global scope), 지역 유효범위(local scope)
public void 에서 내 아래에 있는 이름을 사용할 때는 
위에 선언해줬던 속성에 접근, 변경이면  =>   this.변수 // 점을 꼭 찍어야해   
변수뿐만 아니라 매서드도 this 로 받을 수 있음 => this.변수


<계속 실수!!!!!>>>>.
public string 변수명 선언시, 
string의 S는 대문자로 

<f11 눌러서 돌렸는데 계속 디버그 뜨고 에러나면>
우선 Terminate 하고 다시 해봐 
그럼 돌아갈 수도 

-옛날에는 전역변수 사용하지 말라고 했는데, 요즘에는 그것도 아니ㅇ9ㅑ
쓰기 편하고 가독성이 올라가면 쓰라고 한다



If 안에서 숫자말고 문자 판단할 때는  => if(문자형 변수이름.equals(""))




+객체지향
-객체지향 분석 설계Object-Oriented Analysis and Design
요구사항의 분석: 화면기반으로 생각해. 메모장에 끄적끄적하면서


-유스케이스  -------> 그냥 구현이 이렇게 된다는 것만 알고 있어
관점으로 구분 
ex. 사용자의 관점, 시간순서대로, 행위를 하는 사람 
본인이 원하는 프로젝트를 진행할 때는 일이 어떻게 진행되는지 아는 것이 중요하므로 한번 생각해보는 것이 좋음



*저금통 만들기 
1.넣는다/ 출금한다
2.금액 
  이름 - 저금통 내에서 사용하기 위한 이름??




*scanner 받을 때 
nextInt(); 말고 nextdouble(); 도 있음 
=> 자료형 따라서 캡 씌울 거 잘 살펴볼 것 



*여러 개 매서드에서 공통으로 변수를 사용하려면 
속성으로 만들어줘 
ex. public int height; 

이런식으로 밖에 선언을 해줘


*조건문이 연속적인 범위로 제시된 경우, 
상위 조건이 안 맞으면 하위 조건에 적용되므로 
한 범위에 해당하는 조건만 걸어줘도 돼 


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*(double)this.inHeight = s.nextDouble();  는 안돼 
왜냐면, 스캐너가 받아주는 this inHeight 는 지금 빈공간이라서 자료형을 선언해줄 수가 없거든 

*this 는 클래스 내에서 해당 변수가 같은 아이임을 의미 



































