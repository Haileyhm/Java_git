*모든 클래스는 object 를 상속해서 만들어진다. 
부모 클래스 이름으로 변수 만들어서 자식클래스의 매서드 사용하는 것처럼

1.Object 클래스
: 공통의 약속. 클래스나 매서드를 공유하지 않는 사람간에도 협업이 가능함

Object figure = new Triangle();
이 경우, Triangle의 매서드는 사용할 수 없음 

형변환을 해서는 사용할 수 있음 
Triangle test = (Triangle)figure; 

1)Object 클래스는 모든 클래스의 부모클래스다
2) 단, 매서드들은 변수 구분을 바탕으로 해서 작동하기 때문에 Object로 클래스 구분을 할 경우 
   Object 에는 매서드가 없으므로 사용할 수 없다. 

2. Object 클래스의 매서드
1)toString
figure.toString(); 랑
System.out.print(figure);

2)equals 
 같은지 비교할 때 사용
figure.equals(new Triangle());
-> 메모리 상에 생성된 주소가 같은지만 봐 

실행하면 자식클래스를 찾아봤다가 없으면 부모클래스 Objcet 를 찾아봐


객체지향은 클래스 안에 여러가지 요소가 있기 때문에 
특정값이 같은지, 전체 변수들이 같은 지 등의 판단은 구체적으로 정해서 비교할 수 있음

나중에 컬랙션프레임워크??를 쓸 때, <sort 하거나 각주를 달 때?> 사용


3)hashcode
해시코드 자체가 메모리 주소는 맞지만 정확하게 매칭되는 주소는 아래.. 오잉..ㅋㅋ
C언어의 주소값과 혼동하면 안돼


Object 형태로 변수를 만들고 그 안에 실질적인 객체를 넣을 수 있다. 

toString 은 클래스이름을 찍어준 것과 비슷하다  Object a 로 변수구분했을 때, a.toStirng 이랑 a 랑 같은
equals 는 커스터마이즈해서 원하는 것을 비교할 수 있어야. 
          그 안에서 캐스팅을 통해 속성값을 비교할 수도 있다 
          캐스팅은 값을 바꾸는 것이 아니라, 비교할 때 특정한 문자형, 클래스의 종류로 바꿔서 비교할래의 의미	
외부에서 누군가가 매서드만 알고 이걸로 처리를 해 하면 
그 매서드를 구성하고 작동하게 할 수 있음

equals (Object obj) 는 기본적으로 들어있는 모양, 변수
 
================
변수
1)값을 저장하는 공간
2)type 정의하는 공간 

ex. 5
int a , double b 에 담을 때 
a = 5
b = 5.0

equals 비교할 때, type 비교도 해 

================
생성자와 toStirng 의 차이 
-생성자는 생성이 될 때, 실행 -> new 키워드를 사용할 때 
-toString 은 변수 이름을 넣었을 때, 매서드를 실행할 때 실행

================
annotation 을 만드는 의미 
@Override 등

내가 나중에 볼 때 더 쉽게 이해하기 위해서야 
override 한 것인지 아닌지, 내가 놓칠 부분을 코드가 잡아주도록 하기 위한 목적도 있음 

코드가 길어져도 가독성이 높아지므로 긍정적


=================
<시험유의>
1.프로젝트, 클래스 이름 첫글자 대문자
2.변수들 이름 첫글자 소문자



=================
-자바에는 다중상속은 없으나, 부모의 부모를 상속받는 것은 가능 
so, 모든 클래스는 Object 클래스를 상속받을 수 있음

-다중상속은 부모가 여러 개 있는 것: 자바에서는 안돼

=> 상속해서 내가 원하는 대로 쓸거야만 기억해